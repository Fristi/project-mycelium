# This Earthfile aims to build Rust for the ESP32 microcontrollers.
# Makes use of the well tested scripted install from the Rust ESP comunity:
# https://github.com/esp-rs/rust-build
VERSION 0.7
FROM debian:stable-slim

linux-setup:
  # RUN --mount=target=/var/lib/apt/lists,type=cache,sharing=locked --mount=target=/var/cache/apt,type=cache,sharing=locked rm -f /etc/apt/apt.conf.d/docker-clean
  RUN apt-get update && apt-get install -y --no-install-recommends git curl gcc wget flex bison gperf python3 python3-pip python3-virtualenv cmake ninja-build ccache libffi-dev libssl-dev dfu-util libusb-1.0-0 unzip libtinfo5

esp-rust-setup:
  FROM +linux-setup
  GIT CLONE --branch build/1.70.0.1 https://github.com/Fristi/rust-build.git rust-build
  WORKDIR rust-build
  RUN ./install-rust-toolchain.sh --llvm-version esp-15.0.0-20221014 --build-target esp32 --extra-crates "ldproxy"
  SAVE ARTIFACT /root/.espressif/* ./espressif

deps:
  FROM +esp-rust-setup
  WORKDIR build  
  COPY +esp-rust-setup/espressif /root/.espressif

  ARG TARGETARCH

  IF [ "$TARGETARCH" = amd64 ]
      ARG ARCH_TRIPLE=x86_64-unknown-linux-gnu
  ELSE IF [ "$TARGETARCH" = arm64 ]
      ARG ARCH_TRIPLE=aarch64-unknown-linux-gnu
  ELSE 
      RUN false
  END

  # These vaules are emited after installing the toolchain.
  # There is no way yet to get this progamaticly, thus this will need updating at times when build tooling updates.
  ENV PATH="/root/.cargo/bin:/root/.espressif/tools/xtensa-esp32-elf-clang/esp-15.0.0-20221014-$ARCH_TRIPLE/bin/:$PATH"
  ENV LIBCLANG_PATH="/root/.espressif/tools/xtensa-esp32-elf-clang/esp-15.0.0-20221014-$ARCH_TRIPLE/esp-clang/lib"

  COPY --dir .cargo ./
  COPY Cargo.toml Cargo.lock build.rs sdkconfig.defaults ./
  RUN mkdir src
  RUN touch src/lib.rs
  RUN cargo +esp build --target xtensa-esp32-espidf --release
  SAVE ARTIFACT target
  SAVE ARTIFACT $CARGO_HOME cargo_home

build:
  FROM +deps
  COPY +deps/target target
  COPY +deps/cargo_home $CARGO_HOME
  COPY --dir src .cargo ./
  COPY Cargo.toml Cargo.lock build.rs sdkconfig.defaults ./
  ENV MYCELIUM_BASE_URL https://mycelium.fly.dev/
  RUN cargo +esp build --target xtensa-esp32-espidf --release
  SAVE ARTIFACT target/xtensa-esp32-espidf/* AS LOCAL artifacts/

flash:
  LOCALLY
  # This step MUST run in "LOCAL" context as you can not yet pass a USB device into a docker container.
  # You MUST have espflash installed localy:
  # https://github.com/esp-rs/espflash

  # Define build arg for the serial port.
  ARG SERIAL_PORT
  # Pass in the name of the binary to flash, most likey to be "artifacts/debug/rust-earthly-build"
  ARG BUILD_BINARY
  
  # Test if we have espflash installed and in our path.
  RUN echo "This step runs localy and needs your machine to have espflash installed first."
  RUN which espflash 2>/dev/null || echo "[ERROR] espflash not found in path, try install it via: cargo install espflash"
  
  # Flash the firmware
  RUN cargo espflash flash $SERIAL_PORT $BUILD_BINARY

